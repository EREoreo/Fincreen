import React, { useState } from 'react';

export default function Fin() {
  const [status, setStatus] = useState('idle'); // idle | processing | done | error
  const [downloadUrl, setDownloadUrl] = useState(null);
  const [currentExchange, setCurrentExchange] = useState('');
  const [errorMessage, setErrorMessage] = useState('');
  const [startTime, setStartTime] = useState(null);
  const [elapsedTime, setElapsedTime] = useState(0);

  // –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  React.useEffect(() => {
    let interval;
    if (status === 'processing' && startTime) {
      interval = setInterval(() => {
        setElapsedTime(Math.floor((Date.now() - startTime) / 1000));
      }, 1000);
    }
    return () => clearInterval(interval);
  }, [status, startTime]);

  const start = async (ex) => {
    setStatus('processing');
    setCurrentExchange(ex.toUpperCase());
    setStartTime(Date.now());
    setElapsedTime(0);
    setErrorMessage('');
    
    try {
      const response = await fetch(`/api/finviz?exchange=${ex}`);
      
      if (!response.ok) {
        throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
      }
      
      // –°–æ–∑–¥–∞–µ–º blob –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const blob = await response.blob();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
      if (blob.size === 0) {
        throw new Error('–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª');
      }
      
      const url = window.URL.createObjectURL(blob);
      setDownloadUrl(url);
      setStatus('done');
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      setErrorMessage(error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      setStatus('error');
    }
  };

  const download = () => {
    if (downloadUrl) {
      const a = document.createElement('a');
      a.href = downloadUrl;
      a.download = `${currentExchange.toLowerCase()}-tickers-${new Date().toISOString().split('T')[0]}.csv`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(downloadUrl);
    }
  };

  const reset = () => {
    setStatus('idle');
    setDownloadUrl(null);
    setCurrentExchange('');
    setErrorMessage('');
    setStartTime(null);
    setElapsedTime(0);
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6">
      <div className="max-w-2xl mx-auto">
        {/* Header */}
        <div className="text-center mb-12">
          <div className="flex items-center justify-center mb-4">
            <div className="w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center mr-3">
              <span className="text-white font-bold text-xl">üìä</span>
            </div>
            <h1 className="text-4xl font-bold text-gray-800">finScrapperExel</h1>
          </div>
          <p className="text-gray-600 text-lg">
            –°–±–æ—Ä —Ç–∏–∫–µ—Ä–æ–≤ –∞–∫—Ü–∏–π —Å Finviz –¥–ª—è NYSE –∏ NASDAQ
          </p>
        </div>

        {/* Main Content */}
        <div className="bg-white rounded-xl shadow-lg p-8">
          {status === 'idle' && (
            <div className="text-center">
              <h2 className="text-2xl font-semibold mb-6 text-gray-800">
                –í—ã–±–µ—Ä–∏—Ç–µ –±–∏—Ä–∂—É –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <button
                  onClick={() => start('nyse')}
                  className="group relative px-8 py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all duration-200 transform hover:scale-105 shadow-md"
                >
                  <div className="flex items-center justify-center">
                    <span className="text-2xl mr-2">‚ñ∂Ô∏è</span>
                    <span className="text-lg font-medium">NYSE</span>
                  </div>
                  <div className="text-sm opacity-90 mt-1">
                    New York Stock Exchange
                  </div>
                </button>
                
                <button
                  onClick={() => start('nasdaq')}
                  className="group relative px-8 py-4 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-all duration-200 transform hover:scale-105 shadow-md"
                >
                  <div className="flex items-center justify-center">
                    <span className="text-2xl mr-2">‚ñ∂Ô∏è</span>
                    <span className="text-lg font-medium">NASDAQ</span>
                  </div>
                  <div className="text-sm opacity-90 mt-1">
                    National Association of Securities Dealers
                  </div>
                </button>
              </div>
            </div>
          )}

          {status === 'processing' && (
            <div className="text-center">
              <div className="flex items-center justify-center mb-6">
                <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-600 border-t-transparent"></div>
              </div>
              <h2 className="text-2xl font-semibold mb-2 text-gray-800">
                –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å {currentExchange}
              </h2>
              <p className="text-gray-600 mb-4">
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...
              </p>
              <div className="bg-gray-100 rounded-lg p-4 inline-block">
                <div className="flex items-center text-sm text-gray-600">
                  <div className="w-4 h-4 mr-2 animate-spin border-2 border-gray-400 border-t-transparent rounded-full"></div>
                  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {formatTime(elapsedTime)}
                </div>
              </div>
            </div>
          )}

          {status === 'done' && (
            <div className="text-center">
              <div className="flex items-center justify-center mb-6">
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center">
                  <span className="text-4xl">‚úÖ</span>
                </div>
              </div>
              <h2 className="text-2xl font-semibold mb-2 text-gray-800">
                –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à—ë–Ω!
              </h2>
              <p className="text-gray-600 mb-6">
                –î–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏ {currentExchange} —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã –∑–∞ {formatTime(elapsedTime)}
              </p>
              
              <div className="space-y-4">
                <button
                  onClick={download}
                  className="w-full md:w-auto px-8 py-4 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors duration-200 shadow-md"
                >
                  <div className="flex items-center justify-center">
                    <span className="text-xl mr-2">üì•</span>
                    –°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª
                  </div>
                </button>
                
                <div className="pt-4">
                  <button
                    onClick={reset}
                    className="px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors duration-200"
                  >
                    <span className="mr-2">üîÑ</span>
                    –ù–æ–≤—ã–π —Å–±–æ—Ä
                  </button>
                </div>
              </div>
            </div>
          )}

          {status === 'error' && (
            <div className="text-center">
              <div className="flex items-center justify-center mb-6">
                <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center">
                  <span className="text-4xl">‚ùå</span>
                </div>
              </div>
              <h2 className="text-2xl font-semibold mb-2 text-gray-800">
                –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
              </h2>
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                <p className="text-red-700 text-sm">
                  {errorMessage || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö'}
                </p>
              </div>
              
              <button
                onClick={reset}
                className="px-8 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors duration-200"
              >
                <span className="mr-2">üîÑ</span>
                –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="text-center mt-8 text-gray-500 text-sm">
          <p>
            –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ —Ç–∏–∫–µ—Ä–æ–≤ –∞–∫—Ü–∏–π —Å —Å–∞–π—Ç–∞ Finviz
          </p>
        </div>
      </div>
    </div>
  );
}